import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class Main
{
	static HashMap<String, Double[]> machineVsmachineResource;
	static HashMap<String, Double[]> machineVsusedMachineResource;
	static HashMap<String, Double[]> appVsAppResource;
	static HashMap<String, String> instanceVsApp;
	static HashMap<String, String> instanceVsMachine;
	static HashMap<String, List<String>> machineVsInstances;
	static HashMap<String, HashMap<String, Integer>> machineVsappVsAppCount;
	static HashMap<String, HashMap<String, Integer>> appVsAppInterference;
	static HashMap<String, HashMap<String, Integer>> inverseAppVsAppInterference;
	static HashMap<String, HashMap<String, Integer>> machineVsAllergicApps;

	static
	{
		machineVsmachineResource = new HashMap<>();
		machineVsusedMachineResource = new HashMap<>();
		appVsAppResource = new HashMap<>();
		instanceVsApp = new HashMap<>();
		instanceVsMachine = new HashMap<>();
		machineVsInstances = new HashMap<>();
		machineVsappVsAppCount = new HashMap<>();
		appVsAppInterference = new HashMap<>();
		inverseAppVsAppInterference = new HashMap<>();
	}

	static PrintWriter pw;
	static StringBuilder sb;

	public static void main(String[] args) throws Exception
	{
		pw = new PrintWriter(new File(Utility.outputFileName));
		sb = new StringBuilder();

		loadMachineResourceFile(new BufferedReader(new FileReader(Utility.machineResourceFile)));
		loadAppResourcesFile(new BufferedReader(new FileReader(Utility.appResourcesFile)));
		loadAppInterferenceFile(new BufferedReader(new FileReader(Utility.appInterferenceFile)));
		loadInstanceDeployFile(new BufferedReader(new FileReader(Utility.instanceDeployFile)));

		int numAssigned = 0;

		Set<String> instanceList = instanceVsApp.keySet();
		for (String instance : instanceList)
		{
			if (instanceVsMachine.get(instance) == null)
			{
				for (String machine : machineVsmachineResource.keySet())
				{
					boolean isAssigned = true;
					Double[] appResource = appVsAppResource.get(instanceVsApp.get(instance));
					Double[] machineUsedResource = machineVsusedMachineResource.get(machine);
					Double[] machineResource = machineVsmachineResource.get(machine);
					Double[] updatedMachineUsedResources = machineVsusedMachineResource.get(machine);

					for (int i = 0; i < 200; ++i)
					{
						if (appResource[i] + machineUsedResource[i] <= machineResource[i])
						{
							updatedMachineUsedResources[i] = appResource[i] + machineUsedResource[i];
						}
						else
						{
							isAssigned = false;
							break;
						}
					}
					if (isAssigned && !checkIfMachineIsAllergic(machine, instance))
					{
						numAssigned++;
						String app = instanceVsApp.get(instance);
						machineVsusedMachineResource.put(machine, updatedMachineUsedResources);
						List<String> machineInstanceList = machineVsInstances.get(machine);
						if (machineInstanceList == null)
						{
							machineVsInstances.put(machine, new ArrayList<>());
						}
						machineVsInstances.get(machine).add(instance);
						instanceVsMachine.put(instance, machine);
						if (numAssigned % 1000 == 0)
						{
							System.out.println("Num assigned: " + numAssigned);
						}
						HashMap<String, Integer> appVsAppCountMap = machineVsappVsAppCount.get(machine);
						if (appVsAppCountMap == null)
						{
							appVsAppCountMap = new HashMap<>();
							machineVsappVsAppCount.put(machine, appVsAppCountMap);
							appVsAppCountMap.put(app, 0);
						}
						appVsAppCountMap.put(app, appVsAppCountMap.get(app) != null ? appVsAppCountMap.get(app) + 1 : 1);
						writeToFile(instance, machine);
						break;
					}
				}
			}
			else
			{
				numAssigned += 1;
			}
		}

		System.out.println("Number of machines assigned: " + numAssigned);
		System.out.println("Number of machines not assigned " + (instanceVsApp.size() - numAssigned));

		pw.write(sb.toString());
		pw.close();
		System.out.println("Output ready!");

	}

	public static void writeToFile(String instance, String machine)
	{
		sb.append(instance);
		sb.append(",");
		sb.append(instanceVsMachine.get(instance));
		sb.append("\n");
	}

	public static void loadMachineResourceFile(BufferedReader br) throws IOException
	{

		String line = new String();
		while ((line = br.readLine()) != null)
		{
			String[] resource = line.split(",");
			Double[] machineResource = new Double[200];
			Double[] machineUsedResource = new Double[200];
			for (int i = 3; i < 7; ++i)
			{
				machineResource[i + 193] = Double.parseDouble(resource[i]);
			}
			for (int i = 0; i < 98; ++i)
			{
				machineResource[i] = Double.parseDouble(resource[1]);
				machineResource[i + 98] = Double.parseDouble(resource[2]);
			}
			for (int i = 0; i < 200; ++i)
			{
				machineUsedResource[i] = 0.0d;
			}
			machineVsmachineResource.put(resource[0], machineResource);
			machineVsusedMachineResource.put(resource[0], machineUsedResource);
		}
		br.close();
	}

	public static void loadAppResourcesFile(BufferedReader br) throws IOException
	{

		String line = new String();
		while ((line = br.readLine()) != null)
		{
			String[] resource = line.split(",");
			Double[] appResources = new Double[200];
			String cpuResource[] = resource[1].split("\\|");
			String ramResource[] = resource[2].split("\\|");
			for (int i = 0; i < 98; ++i)
			{
				appResources[i] = Double.parseDouble(cpuResource[i]);
				appResources[i + 98] = Double.parseDouble(ramResource[i]);
			}
			for (int i = 196; i < 200; ++i)
			{
				appResources[i] = Double.parseDouble(resource[i - 193]);
			}
			appVsAppResource.put(resource[0], appResources);
		}
		br.close();
	}

	public static void loadInstanceDeployFile(BufferedReader br) throws IOException
	{
		//add rescheduling code here
		String line = new String();
		while ((line = br.readLine()) != null)
		{
			String[] resource = line.split(",");
			String instanceName = resource[0];
			String appName = resource[1];
			instanceVsApp.put(instanceName, appName);
			if (resource.length > 2)
			{
				String machineName = resource[2];
				writeToFile(instanceName, machineName);
				for (String machine : machineVsmachineResource.keySet())
				{
					boolean isAssigned = true;
					Double[] appResource = appVsAppResource.get(instanceVsApp.get(instanceName));
					Double[] machineUsedResource = machineVsusedMachineResource.get(machine);
					Double[] machineResource = machineVsmachineResource.get(machine);
					Double[] updatedMachineUsedResources = machineVsusedMachineResource.get(machine);

					for (int i = 0; i < 200; ++i)
					{
						if (appResource[i] + machineUsedResource[i] <= machineResource[i])
						{
							updatedMachineUsedResources[i] = appResource[i] + machineUsedResource[i];
						}
						else
						{
							isAssigned = false;
							break;
						}
					}
					if (isAssigned && !checkIfMachineIsAllergic(machine, instanceName))
					{
						String app = instanceVsApp.get(instanceName);
						machineVsusedMachineResource.put(machine, updatedMachineUsedResources);
						List<String> machineInstanceList = machineVsInstances.get(machine);
						if (machineInstanceList == null)
						{
							machineVsInstances.put(machine, new ArrayList<>());
						}
						machineVsInstances.get(machine).add(instanceName);
						instanceVsMachine.put(instanceName, machine);

						HashMap<String, Integer> appVsAppCountMap = machineVsappVsAppCount.get(machine);
						if (appVsAppCountMap == null)
						{
							appVsAppCountMap = new HashMap<>();
							machineVsappVsAppCount.put(machine, appVsAppCountMap);
							appVsAppCountMap.put(app, 0);
						}
						appVsAppCountMap.put(app, appVsAppCountMap.get(app) != null ? appVsAppCountMap.get(app) + 1 : 1);
						writeToFile(instanceName, machine);
						break;
					}
				}
			}
		}
		br.close();
	}

	public static void loadAppInterferenceFile(BufferedReader br) throws IOException
	{

		String line = new String();
		while ((line = br.readLine()) != null)
		{
			String[] resource = line.split(",");
			String app1Name = resource[0];
			String app2Name = resource[1];
			Integer app2Count = Integer.parseInt(resource[2]);

			HashMap<String, Integer> interferenceToFirstInstance = appVsAppInterference.get(app1Name);

			if (interferenceToFirstInstance == null)
			{
				interferenceToFirstInstance = new HashMap<String, Integer>();
				appVsAppInterference.put(app1Name, interferenceToFirstInstance);
			}
			interferenceToFirstInstance.put(app2Name, app2Count);

			HashMap<String, Integer> interferenceToSecondInstance = inverseAppVsAppInterference.get(app1Name);

			if (interferenceToSecondInstance == null)
			{
				interferenceToSecondInstance = new HashMap<String, Integer>();
				inverseAppVsAppInterference.put(app2Name, interferenceToSecondInstance);
			}
			interferenceToSecondInstance.put(app1Name, app2Count);
		}
		br.close();
	}

	public static boolean checkIfMachineIsAllergic(String machine, String currentInstance)
	{
		int currentInstanceCount = 0;
		if (machineVsappVsAppCount.get(machine) == null)
		{
			return false;
		}
		if (currentInstance.equals("inst_87348"))
		{
			int a = 1;
			System.out.println(a);
		}
		String app = instanceVsApp.get(currentInstance);
		currentInstanceCount = machineVsappVsAppCount.get(machine).get(app) == null ? 0 : machineVsappVsAppCount.get(machine).get(app);

		for (Map.Entry<String, Integer> existingAppVsAppCount : machineVsappVsAppCount.get(machine).entrySet())
		{
			//app1, app2, k -- app_1391,app_8191,1
			//app1 count = a1
			//app2 count = a2
			// app 1 getting added
			// if a2>k, can't add app 1
			String app1 = app;
			int a1 = currentInstanceCount + 1;
			String app2 = existingAppVsAppCount.getKey();
			int a2 = existingAppVsAppCount.getValue();
			if (app2.equals("app_4825"))
			{
				int l = 0;
			}
			int k = Integer.MAX_VALUE;
			if (appVsAppInterference.get(app1) != null)
			{
				k = appVsAppInterference.get(app1).get(app2) == null ? Integer.MAX_VALUE : appVsAppInterference.get(app1).get(app2);
			}

			if (a2 > k || k == 0)
			{
				return true;
			}
			if (appVsAppInterference.get(app2) != null && appVsAppInterference.get(app2).get(app1) != null && appVsAppInterference.get(app2).get(app1) == 0)
			{
				return true;
			}
			//not checking for app2count, coz app2count has to be greater than or equal 1
			if (appVsAppInterference.get(app1) != null && appVsAppInterference.get(app1).get(app2) != null && appVsAppInterference.get(app1).get(app2) == 0)
			{
				return true;
			}

			if (inverseAppVsAppInterference.get(app2) != null && inverseAppVsAppInterference.get(app2).get(app1) != null && inverseAppVsAppInterference.get(app2).get(app1) == 0)
			{
				return true;
			}
			//not checking for app2count, coz app2count has to be greater than or equal 1
			if (inverseAppVsAppInterference.get(app1) != null && inverseAppVsAppInterference.get(app1).get(app2) != null && inverseAppVsAppInterference.get(app1).get(app2) == 0)
			{
				return true;
			}

			// app_1391,app_8191,1
			// app2 getting added
			// a2=k and a1>1, can't be added
			// or else, can add.

			app1 = existingAppVsAppCount.getKey();
			a1 = existingAppVsAppCount.getValue();
			app2 = app;
			a2 = currentInstanceCount + 1;
			k = Integer.MAX_VALUE;
			//            System.out.println(appVsAppInterference.get(app1));
			if (appVsAppInterference.get(app1) != null)
			{
				//                System.out.println(appVsAppInterference.get(app1).get(app2));
				k = appVsAppInterference.get(app1).get(app2) == null ? Integer.MAX_VALUE : appVsAppInterference.get(app1).get(app2);
			}
			if ((a2 >= k && a1 >= 1) || k == 0)
			{
				return true;
			}
		}
		return false;
	}
}
